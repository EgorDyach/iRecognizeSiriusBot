import { Context, Keyboard } from "grammy";
import { db } from "./db";
import {
  IKCancelAddingTask,
  IKAdminMenu,
  IKUserMenu,
  IKUserFriendshipMenu,
} from "./keyboards";
import { MyConversation, MyContext, bot, taskTypeText } from "./constants";
import { isAdmin, checkFriendship } from "./helpers";
import { SELECT_USER } from "./sqlQueries";

export async function createNewTask(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–∞–º–æ –∑–∞–¥–∞–Ω–∏–µ.", {
    reply_markup: IKCancelAddingTask,
  });

  const msg = await conversation.waitFor(":text", {
    otherwise: async (ctx) => {
      if (ctx.callbackQuery?.data === "cancelAddingTask") {
        await setMenu(ctx);
        return;
      }
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ.");
    },
  });
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–í–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—é?", {
    reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
  });
  const yesOrNoRes = await conversation.waitFor(":text", {
    otherwise: async (ctx) => {
      if (ctx.callbackQuery?.data === "cancelAddingTask") {
        await setMenu(ctx);
        return;
      }
      await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".');
    },
  });
  let yesOrNo = yesOrNoRes.message?.text;
  while (yesOrNo !== "–î–∞" && yesOrNo !== "–ù–µ—Ç") {
    await ctx.reply(
      '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç", –≤–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—é?',
      {
        reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
      }
    );
    const yesOrNoRes = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".'),
    });

    yesOrNo = yesOrNoRes.message?.text;
  }
  let description = null;

  if (yesOrNo === "–î–∞") {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.");
    const msg = await conversation.waitFor(":text", {
      otherwise: async (ctx) => {
        await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.");
      },
    });
    description = msg.message?.text;
  }
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–ü—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é?", {
    reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
  });
  const yesOrNoRes2 = await conversation.waitFor(":text", {
    otherwise: async (ctx) =>
      await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".'),
  });
  yesOrNo = yesOrNoRes2.message?.text;
  while (yesOrNo !== "–î–∞" && yesOrNo !== "–ù–µ—Ç") {
    await ctx.reply(
      '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç", –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é?',
      {
        reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
      }
    );
    const yesOrNoRes2 = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".'),
    });

    yesOrNo = yesOrNoRes2.message?.text;
  }

  let photo = null;
  if (yesOrNo === "–î–∞") {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é.");
    const msg = await conversation.waitFor(":photo", {
      otherwise: async (ctx) =>
        await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é."),
    });
    photo = msg.message?.photo;
    while (!photo) {
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é.");
      const msg = await conversation.waitFor("msg");
      photo = msg.message?.photo;
    }
  }
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.", {
    reply_markup: { remove_keyboard: true },
  });
  const answer = await conversation.waitFor(":text", {
    otherwise: async (ctx) =>
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."),
  });

  if (photo) {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.replyWithPhoto(photo[photo.length - 1].file_id, {
      caption: `üî¢ –£—Ä–æ–≤–µ–Ω—å: ${
        // @ts-ignore
        ctx.session.addingTaskLevel === 5
          ? "–§–∏–Ω–∞–ª"
          : // @ts-ignore
            ctx.session.addingTaskLevel
      }
–¢–∏–ø: ${(() => {
        // @ts-ignore
        return taskTypeText[ctx.session.addingTaskType];
      })()}
üëâüèª –ó–∞–¥–∞–Ω–∏–µ: ${msg.message?.text}
${
  !!description
    ? `
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`
    : ""
}
‚ùóÔ∏è –û—Ç–≤–µ—Ç: ${answer.message?.text}`,
    });
  } else {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply(
      `üî¢ –£—Ä–æ–≤–µ–Ω—å: ${
        // @ts-ignore
        ctx.session.addingTaskLevel === 5
          ? "–§–∏–Ω–∞–ª"
          : // @ts-ignore
            ctx.session.addingTaskLevel
      }
–¢–∏–ø: ${(() => {
        // @ts-ignore
        return taskTypeText[ctx.session.addingTaskType];
      })()}

üëâüèª –ó–∞–¥–∞–Ω–∏–µ: ${msg.message?.text}
${
  !!description
    ? `
  üìñ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`
    : ""
}
‚ùóÔ∏è –û—Ç–≤–µ—Ç: ${answer.message?.text}`
    );
  }
  await db.query(
    "INSERT INTO level_tasks (task_type, task, task_description, answer, photo, level) VALUES ($1, $2, $3, $4, $5, $6)",
    [
      // @ts-ignore
      ctx.session.addingTaskType,
      msg.message?.text,
      description,
      answer.message?.text,
      photo ? photo[photo?.length - 1].file_id : null,
      // @ts-ignore
      ctx.session.addingTaskLevel,
    ]
  );
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", {
    reply_markup: IKAdminMenu,
  });
}

export async function greeting(conversation: MyConversation, ctx: MyContext) {
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)");
  const nameRes = await conversation.waitFor("msg:text", {
    otherwise: async (ctx) => await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û."),
  });
  let name = nameRes.message?.text || "";
  while (name.split(" ").length < 3) {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û.");
    const nameRes = await conversation.waitFor("msg:text", {
      otherwise: async (ctx) => await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û."),
    });
    name = nameRes.message?.text || "";
  }

  await db.query("UPDATE users SET name = $1 WHERE id = $2", [
    name,
    ctx.from?.id,
  ]);
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!");
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–° –∫–∞–∫–æ–≥–æ –≤—ã –∫—É—Ä—Å–∞?");
  let course = await conversation.waitFor("msg:text", {
    otherwise: async (ctx) => await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞."),
  });
  while (isNaN(Number(course.message?.text))) {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ).");
    course = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞."),
    });
  }
  await db.query("UPDATE users SET course = $1 WHERE id = $2", [
    course.message?.text,
    ctx.from?.id,
  ]);
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–ê –∏–∑ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã?");
  const group = await conversation.waitFor("msg:text", {
    otherwise: async (ctx) =>
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã."),
  });
  await db.query("UPDATE users SET college_group = $1 WHERE id = $2", [
    group.message?.text,
    ctx.from?.id,
  ]);
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply(
    "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ!\n–í–∞–∂–Ω–æ, —ç—Ç–æ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ —Å–µ–ª—Ñ–∏!"
  );
  const photo = await conversation.waitFor("msg:photo", {
    otherwise: async (ctx) =>
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ."),
  });

  await db.query("UPDATE users SET photo = $1 WHERE id = $2", [
    photo.message?.photo[photo.message?.photo.length - 1].file_id,
    ctx.from?.id,
  ]);
  await db.query("UPDATE users SET role = $1 WHERE id = $2", [
    "student_is_checking",
    ctx.from?.id,
  ]);
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply(
    "–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–∏—à–ª–µ–º –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ!"
  );
}
export const getTextAnswer = async (
  conversation: MyConversation,
  ctx: MyContext
) => {
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply(
    "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º."
  );
  const res = await conversation.waitFor(":text", {
    otherwise: async (ctx) => {
      if (
        ctx.callbackQuery ||
        (ctx.message &&
          (ctx.message.text === "/menu" || ctx.message.text === "/start"))
      ) {
        return;
      }
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º."
      );
    },
  });
  // @ts-ignore
  await db.query(
    "UPDATE tasks_status SET user_answer_text = $1, status =  $2 WHERE id = $3;",
    [
      // @ts-ignore
      res.message.text,
      "checking",
      // @ts-ignore
      ctx.session.taskId,
    ]
  );
  await db.query(
    "INSERT INTO tasks (tasks_status_id, checked_by) VALUES ($1, $2)",
    // @ts-ignore
    [ctx.session.taskId, null]
  );
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", {
    reply_markup: IKUserMenu,
  });
};
export const getPhotoAnswer = async (
  conversation: MyConversation,
  ctx: MyContext
) => {
  await ctx.reply(
    "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ-—Å–µ–ª—Ñ–∏ —Å –Ω—É–∂–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º."
  );
  const photoRes = await conversation.waitFor(":photo", {
    otherwise: async (ctx) => {
      if (
        ctx.callbackQuery ||
        (ctx.message &&
          (ctx.message.text === "/menu" || ctx.message.text === "/start"))
      ) {
        return;
      }
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ-—Å–µ–ª—Ñ–∏ —Å –Ω—É–∂–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º.");
    },
  });
  await db.query(
    "UPDATE tasks_status SET user_answer_photo = $1, user_answer_text = $2, status = $3 WHERE id = $4",
    [
      photoRes.message?.photo.at(-1)?.file_id || null,
      photoRes.message?.caption || null,
      "checking",
      // @ts-ignore
      ctx.session.taskId,
    ]
  );
  await db.query(
    "INSERT INTO tasks (tasks_status_id, checked_by) VALUES ($1, $2)",
    // @ts-ignore
    [ctx.session.taskId, null]
  );
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply("–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", {
    reply_markup: IKUserMenu,
  });
};

export const getFriendAnswer = async (
  conversation: MyConversation,
  ctx: MyContext
) => {
  const myKeyboard = new Keyboard()
    .text("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    .text("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
    .resized();
  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply(
    "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º—É-—Ç–æ.",
    { reply_markup: myKeyboard }
  );
  const res = await conversation.waitFor(":text", {
    otherwise: async (ctx) =>
      await ctx.reply(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' –∏–ª–∏ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'."
      ),
  });
  let text = res.message?.text;
  while (text !== "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É" && text !== "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è") {
    await ctx.reply(
      "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' –∏–ª–∏ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'."
    );
    const res = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply(
          "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' –∏–ª–∏ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'."
        ),
    });
    text = res.message?.text;
  }
  if (text === "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è") {
    const myKeyboard = new Keyboard()
      .text("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
      .text("–í –º–µ–Ω—é")
      .resized();
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —É –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤.",
      {
        reply_markup: myKeyboard,
      }
    );
    const res = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply(
          "–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —É –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤.",
          {
            reply_markup: myKeyboard,
          }
        ),
    });
    let id = res.message?.text;
    if (id === "–í –º–µ–Ω—é") {
      await setMenu(ctx);
      return;
    }
    let friendShipRes = await db.query(
      "SELECT * FROM friendships WHERE id = $1;",
      [id]
    );

    while (!friendShipRes.rowCount && id !== "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É") {
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ ID –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ ID.",
        {
          reply_markup: myKeyboard,
        }
      );
      const res = await conversation.waitFor(":text", {
        otherwise: async (ctx) =>
          await ctx.reply(
            "–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —É –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–æ–≤.",
            {
              reply_markup: myKeyboard,
            }
          ),
      });
      id = res.message?.text;
      friendShipRes = await db.query(
        "SELECT * FROM friendships WHERE id = $1;",
        [id]
      );
    }
    if (friendShipRes.rowCount) {
      const user = await db.query(SELECT_USER, [ctx.from?.id]);
      await db.query(
        "UPDATE friendships SET users_nicks = $1, users_ids = $2 WHERE id = $3",
        [
          [
            ...friendShipRes.rows[0].users_nicks,
            user.rows[0].nick ? user.rows[0].nick : "noneNick",
          ],
          [...friendShipRes.rows[0].users_ids, user.rows[0].id],
          friendShipRes.rows[0].id,
        ]
      );
      const t = await db.query(
        `UPDATE users 
SET friendship_id = $1 
WHERE id = $2 
RETURNING *;`,
        [friendShipRes.rows[0].id, user.rows[0].id]
      );
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(`–î–æ–±–∞–≤–∏–ª–∏ –≤–∞—Å –≤ –∫–æ–º–∞–Ω–¥—É ${t.rows[0].name}.`);
      for (const user of friendShipRes.rows[0].users_ids) {
        await bot.api.sendMessage(
          user,
          `üë§ –í –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É –≤—Å—Ç—É–ø–∏–ª –∏–≥—Ä–æ–∫${
            ctx.from?.username ? ctx.from?.username : ""
          }.`
        );
      }
      if ([...friendShipRes.rows[0].users_ids, ctx.from?.id].length === 2) {
        const r = await db.query(
          "SELECT * FROM level_tasks WHERE level = 2 AND task_type=$1",
          ["friend"]
        );
        for (const user of friendShipRes.rows[0].users_ids) {
          await db.query(
            "UPDATE tasks_status SET status = $1 WHERE user_id = $2 AND task_id = $3",
            ["completed", user, r.rows[0].id]
          );
          await bot.api.sendMessage(
            user,
            " üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ 2 —á–µ–ª–æ–≤–µ–∫!"
          );
        }
      }
      if ([...friendShipRes.rows[0].users_ids, ctx.from?.id].length === 4) {
        const r = await db.query(
          "SELECT * FROM level_tasks WHERE level = 3 AND task_type=$1",
          ["friend"]
        );
        await db.query(
          "UPDATE tasks_status SET status = $1 WHERE user_id = $2 AND task_id = $3",
          ["completed", user, r.rows[0].id]
        );
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply(
          " üéâ –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ 4 —á–µ–ª–æ–≤–µ–∫!"
        );
      }
      return;
    }
  }
  // Select a random team name that is not busy
  const selectedNameResult = await db.query(
    `SELECT ID, name
     FROM team_names
     WHERE is_busy = FALSE
     ORDER BY RANDOM()
     LIMIT 1`
  );

  const selectedName = selectedNameResult.rows[0];

  const user = await db.query(
    `SELECT nick, ID
     FROM users
     WHERE ID = $1`,
    [ctx.from?.id]
  );

  const newFriendshipIdResult = await db.query(
    `SELECT COALESCE(MAX(ID), 100000) + 1 AS new_id
     FROM friendships`
  );

  const newFriendshipId = newFriendshipIdResult.rows[0].new_id;

  // Insert the new friendship
  const insertResult = await db.query(
    `INSERT INTO friendships (ID, users_nicks, users_ids, name)
     VALUES ($1, $2, $3, $4)
     RETURNING *`,
    [newFriendshipId, [user.rows[0].nick], [user.rows[0].id], selectedName.name]
  );

  // Update the team name to set it as busy
  await db.query(
    `UPDATE team_names
     SET is_busy = TRUE
     WHERE ID = $1`,
    [selectedName.id]
  );

  await db.query(`UPDATE users SET friendship_id  = $1 WHERE id = $2`, [
    newFriendshipId,
    user.rows[0].id,
  ]);

  try {
    await ctx.editMessageReplyMarkup();
  } catch {}
  await ctx.reply(
    `–ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã: ${insertResult.rows[0].name}. 

    –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫–∞.

    –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞—à —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ ID: ${insertResult.rows[0].id}.`
  );
};

export const setMenu = async (ctx: Context) => {
  const user = (await db.query(SELECT_USER, [ctx.from?.id])).rows[0];
  if (user.role === "student_not_checked") {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!");
    return;
  }
  if (user.role === "student_is_checking") {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∏!");
    return;
  }
  const isFriendship = await checkFriendship(ctx.from?.id || 0);
  try {
    try {
      await ctx.editMessageReplyMarkup();
    } catch {}
    await ctx.reply(
      "üìÉ <b><u>–ú–µ–Ω—é</u></b>",
      user.role.includes("admin")
        ? { parse_mode: "HTML", reply_markup: IKAdminMenu }
        : {
            parse_mode: "HTML",
            reply_markup: isFriendship ? IKUserFriendshipMenu : IKUserMenu,
          }
    );
  } catch (e) {
    console.log(e);
    await ctx.reply(
      "üìÉ <b><u>–ú–µ–Ω—é</u></b>",
      user.role.includes("admin")
        ? { parse_mode: "HTML", reply_markup: IKAdminMenu }
        : {
            parse_mode: "HTML",
            reply_markup: isFriendship ? IKUserFriendshipMenu : IKUserMenu,
          }
    );
  }
};
