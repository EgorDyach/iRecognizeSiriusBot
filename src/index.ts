// IMPORTS
import format from "pg-format";
import { db } from "./db";
import plural from "plural-ru";
import {
  Bot,
  session,
  API_CONSTANTS,
  Keyboard,
  InlineKeyboard,
  Context,
  Middleware,
} from "grammy";
import {
  Conversation,
  ConversationFlavor,
  conversations,
  createConversation,
} from "@grammyjs/conversations";
import fs from "fs";

import * as dotenv from "dotenv";
dotenv.config();
//
//
//
//
//
// CONSTANTS
//
let token = process.env.BOT_TOKEN;
if (!token) token = "123";
const bot = new Bot(token);

bot.api.setMyCommands([
  {
    command: "start",
    description: "–ù–∞—á–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤–æ —Ñ–ª–µ—à–º–æ–±–µ.",
  },
  {
    command: "menu",
    description: "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
  },
]);

type MyContext = Context & ConversationFlavor;
type MyConversation = Conversation<MyContext>;

const taskTypeEmoji = {
  photo: "üì∏",
  basic: "üìù",
  friend: "üë•",
};

const taskTypeText = {
  photo: "üì∏ –§–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ",
  friend: "üë• –°–æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É",
  basic: "üìù –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
};

const tasksKeyboardEmoji = {
  "not completed": "‚≠ïÔ∏è",
  completed: "‚úÖ",
  checking: "üîò",
};

const tasksKeyboardName = {
  photo: "–§–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ",
  friend: "–î—Ä—É–∂–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
  basic: "–ó–∞–¥–∞–Ω–∏–µ",
};
//
//
//
//
//
// KEYBOARDS
//
const IKViewLevel = new InlineKeyboard()
  .text("< –ù–∞–∑–∞–¥", "viewLevel_cancel")
  .text("test level", "viewLevel_0")
  .text("level 1", "viewLevel_1")
  .row()
  .text("level 2", "viewLevel_2")
  .text("level 3", "viewLevel_3")
  .text("level 4", "viewLevel_4");

const IKRemoveLevel = new InlineKeyboard()
  .text("< –ù–∞–∑–∞–¥", "removeLevel_cancel")
  .text("test level", "removeLevel_0")
  .text("level 1", "removeLevel_1")
  .row()
  .text("level 2", "removeLevel_2")
  .text("level 3", "removeLevel_3")
  .text("level 4", "removeLevel_4");

const IKAddLevel = new InlineKeyboard()
  .text("< –ù–∞–∑–∞–¥", "addTaskLevel_cancel")
  .text("test level", "addTaskLevel_0")
  .text("level 1", "addTaskLevel_1")
  .row()
  .text("level 2", "addTaskLevel_2")
  .text("level 3", "addTaskLevel_3")
  .text("level 4", "addTaskLevel_4");

const IKAdminMenu = new InlineKeyboard()
  .text("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á–µ—Ç—ã", "reviewTasks")
  .row()
  .text("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "addTaskMenu")
  .row()
  .text("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–∏—è", "viewTaskMenu")
  .row()
  .text("–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å", "unlockLevelMenu")
  .row()
  .text("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ", "removeTaskMenu")
  .row()
  .text("–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–æ–≤", "leaveAdmin");

const IKUserMenu = new InlineKeyboard()
  .text("üî¢ –£—Ä–æ–≤–Ω–∏", "levels")
  .row()
  .text("üëÄ –†–µ–π—Ç–∏–Ω–≥", "rating")
  .row()
  .text("üìã –ü—Ä–∞–≤–∏–ª–∞", "rules")
  .row()
  .text("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", "contacts");

const IKRules = new InlineKeyboard()
  .text("üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "rulesItem_calendar")
  .row()
  .text("üìã –ê–ª–≥–æ—Ä–∏—Ç–º —É—á–∞—Å—Ç–∏—è", "rulesItem_algorithm")
  .row()
  .text("üìä –≠—Ç–∞–ø—ã —Ñ–ª–µ—à–º–æ–±–∞", "rulesItem_steps")
  .row()
  .text("üèÜ –ò—Ç–æ–≥–∏", "rulesItem_results")
  .row()
  .text("–í –º–µ–Ω—é", "openMenu");

const IKCancelAddingTask = new InlineKeyboard().text(
  "< –û—Ç–º–µ–Ω–∞",
  "cancelAddingTask"
);

const IKUnlockMenu = new InlineKeyboard()
  .text("‚úÖ –û—Ç–∫—Ä—ã—Ç—å", "unlockLevel")
  .text("< –û—Ç–º–µ–Ω–∞", "openMenu");

const IKOpenMenu = new InlineKeyboard().text("–í –º–µ–Ω—é", "openMenu");

//
//
//
//
//
// UTILS

async function createNewTask(conversation: MyConversation, ctx: MyContext) {
  await ctx.editMessageText("–í–≤–µ–¥–∏—Ç–µ —Å–∞–º–æ –∑–∞–¥–∞–Ω–∏–µ.", {
    reply_markup: IKCancelAddingTask,
  });

  const msg = await conversation.waitFor(":text", {
    otherwise: async (ctx) => {
      if (ctx.callbackQuery?.data === "cancelAddingTask") {
        await setMenu(ctx);
        return;
      }
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ.");
    },
  });

  await ctx.reply("–í–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—é?", {
    reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
  });
  const yesOrNoRes = await conversation.waitFor(":text", {
    otherwise: async (ctx) => {
      if (ctx.callbackQuery?.data === "cancelAddingTask") {
        await setMenu(ctx);
        return;
      }
      await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".');
    },
  });
  let yesOrNo = yesOrNoRes.message?.text;
  while (yesOrNo !== "–î–∞" && yesOrNo !== "–ù–µ—Ç") {
    await ctx.reply(
      '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç", –≤–≤–æ–¥–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—é?',
      {
        reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
      }
    );
    const yesOrNoRes = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".'),
    });

    yesOrNo = yesOrNoRes.message?.text;
  }
  let description = null;

  if (yesOrNo === "–î–∞") {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.");
    const msg = await conversation.waitFor(":text", {
      otherwise: async (ctx) => {
        await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.");
      },
    });
    description = msg.message?.text;
  }

  await ctx.reply("–ü—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é?", {
    reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
  });
  const yesOrNoRes2 = await conversation.waitFor(":text", {
    otherwise: async (ctx) =>
      await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".'),
  });
  yesOrNo = yesOrNoRes2.message?.text;
  while (yesOrNo !== "–î–∞" && yesOrNo !== "–ù–µ—Ç") {
    await ctx.reply(
      '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å "–î–∞" –∏–ª–∏ "–ù–µ—Ç", –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é?',
      {
        reply_markup: new Keyboard().text("–î–∞").text("–ù–µ—Ç").resized().oneTime(),
      }
    );
    const yesOrNoRes2 = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ "–î–∞" –∏–ª–∏ "–ù–µ—Ç".'),
    });

    yesOrNo = yesOrNoRes2.message?.text;
  }

  let photo = null;
  if (yesOrNo === "–î–∞") {
    await ctx.reply("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é.");
    const msg = await conversation.waitFor(":photo", {
      otherwise: async (ctx) =>
        await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é."),
    });
    photo = msg.message?.photo;
    while (!photo) {
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é.");
      const msg = await conversation.waitFor("msg");
      photo = msg.message?.photo;
    }
  }

  await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ.", {
    reply_markup: { remove_keyboard: true },
  });
  const answer = await conversation.waitFor(":text", {
    otherwise: async (ctx) =>
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."),
  });

  if (photo) {
    await ctx.replyWithPhoto(photo[photo.length - 1].file_id, {
      // @ts-ignore
      caption: `üî¢ –£—Ä–æ–≤–µ–Ω—å: ${ctx.session.addingTaskLevel}
–¢–∏–ø: ${(() => {
        // @ts-ignore
        return taskTypeText[ctx.session.addingTaskType];
      })()}
üëâüèª –ó–∞–¥–∞–Ω–∏–µ: ${msg.message?.text}
${
  !!description
    ? `
üìñ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`
    : ""
}
‚ùóÔ∏è –û—Ç–≤–µ—Ç: ${answer.message?.text}`,
    });
  } else {
    await ctx.reply(
      // @ts-ignore
      `üî¢ –£—Ä–æ–≤–µ–Ω—å: ${ctx.session.addingTaskLevel}
–¢–∏–ø: ${(() => {
        // @ts-ignore
        return taskTypeText[ctx.session.addingTaskType];
      })()}

üëâüèª –ó–∞–¥–∞–Ω–∏–µ: ${msg.message?.text}
${
  !!description
    ? `
  üìñ –û–ø–∏—Å–∞–Ω–∏–µ: ${description}`
    : ""
}
‚ùóÔ∏è –û—Ç–≤–µ—Ç: ${answer.message?.text}`
    );
  }
  await db.query(
    "INSERT INTO level_tasks (task_type, task, task_description, answer, photo, level) VALUES ($1, $2, $3, $4, $5, $6)",
    [
      // @ts-ignore
      ctx.session.addingTaskType,
      msg.message?.text,
      description,
      answer.message?.text,
      photo ? photo[photo?.length - 1].file_id : null,
      // @ts-ignore
      ctx.session.addingTaskLevel,
    ]
  );
  await ctx.reply("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!", {
    reply_markup: IKAdminMenu,
  });
}

async function greeting(conversation: MyConversation, ctx: MyContext) {
  await ctx.reply("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)");
  const nameRes = await conversation.waitFor("msg:text", {
    otherwise: async (ctx) => await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û."),
  });
  let name = nameRes.message?.text || "";
  while (name.split(" ").length < 3) {
    await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û.");
    const nameRes = await conversation.waitFor("msg:text", {
      otherwise: async (ctx) => await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û."),
    });
    name = nameRes.message?.text || "";
  }

  await db.query("UPDATE users SET name = $1 WHERE id = $2", [
    name,
    ctx.from?.id,
  ]);

  await ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!");

  await ctx.reply("–° –∫–∞–∫–æ–≥–æ –≤—ã –∫—É—Ä—Å–∞?");
  let course = await conversation.waitFor("msg:text", {
    otherwise: async (ctx) => await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞."),
  });
  while (isNaN(Number(course.message?.text))) {
    await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞ (—á–∏—Å–ª–æ).");
    course = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞."),
    });
  }
  await db.query("UPDATE users SET course = $1 WHERE id = $2", [
    course.message?.text,
    ctx.from?.id,
  ]);
  await ctx.reply("–ê –∏–∑ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã?");
  const group = await conversation.waitFor("msg:text", {
    otherwise: async (ctx) =>
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã."),
  });
  await db.query("UPDATE users SET college_group = $1 WHERE id = $2", [
    group.message?.text,
    ctx.from?.id,
  ]);
  await ctx.reply(
    "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–≤–æ–µ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ!\n–í–∞–∂–Ω–æ, —ç—Ç–æ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π –ø–æ —Å–µ–ª—Ñ–∏!"
  );
  const photo = await conversation.waitFor("msg:photo", {
    otherwise: async (ctx) =>
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ."),
  });

  await db.query("UPDATE users SET photo = $1 WHERE id = $2", [
    photo.message?.photo[photo.message?.photo.length - 1].file_id,
    ctx.from?.id,
  ]);
  const getLevelTasks = async (
    level: number,
    taskType: "basic" | "photo" | "friend",
    limit: number
  ) => {
    return (
      await db.query(
        `SELECT * FROM level_tasks WHERE level = $1 AND task_type = $2 ORDER BY RANDOM() LIMIT $3;`,
        [level, taskType, limit]
      )
    ).rows.map((el) => [el.id, ctx.from?.id, "not completed", level, null]);
  };
  const levels0 = await getLevelTasks(0, "basic", 1);
  const levels1basic = await getLevelTasks(1, "basic", 4);
  const levels1photo = await getLevelTasks(1, "photo", 1);
  const levels2basic = await getLevelTasks(2, "basic", 4);
  const levels2photo = await getLevelTasks(2, "photo", 2);
  const levels2friend = await getLevelTasks(2, "friend", 1);
  const levels3basic = await getLevelTasks(3, "basic", 6);
  const levels3photo = await getLevelTasks(3, "photo", 1);
  const levels3friend = await getLevelTasks(3, "friend", 1);
  const levels4basic = await getLevelTasks(4, "basic", 3);
  const values = [
    ...levels0,
    ...levels1basic,
    ...levels1photo,
    ...levels2basic,
    ...levels2photo,
    ...levels2friend,
    ...levels3basic,
    ...levels3photo,
    ...levels3friend,
    ...levels4basic,
  ];
  console.log(values);
  await db.query(
    format(
      "INSERT INTO tasks_status (task_id, user_id, status, level, friendship_id) VALUES %L",
      values
    )
  );

  await ctx.reply("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!");
  await ctx.reply("üìÉ <b><u>–ú–µ–Ω—é</u></b>", {
    reply_markup: IKUserMenu,
    parse_mode: "HTML",
  });
}
const getTextAnswer = async (conversation: MyConversation, ctx: MyContext) => {
  await ctx.reply(
    "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º."
  );
  const res = await conversation.waitFor(":text", {
    otherwise: async (ctx) =>
      await ctx.reply(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º."
      ),
  });
  // @ts-ignore
  await db.query(
    "UPDATE tasks_status SET user_answer_text = $1, status =  $2 WHERE id = $3;",
    [
      // @ts-ignore
      res.message.text,
      "checking",
      // @ts-ignore
      ctx.session.taskId,
    ]
  );
  await db.query(
    "INSERT INTO tasks (tasks_status_id, checked_by) VALUES ($1, $2)",
    // @ts-ignore
    [ctx.session.taskId, null]
  );
  await ctx.reply("–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", {
    reply_markup: IKUserMenu,
  });
};
const getPhotoAnswer = async (conversation: MyConversation, ctx: MyContext) => {
  await ctx.reply(
    "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ-—Å–µ–ª—Ñ–∏ —Å –Ω—É–∂–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º."
  );
  const photoRes = await conversation.waitFor(":photo", {
    otherwise: async (ctx) =>
      await ctx.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ-—Å–µ–ª—Ñ–∏ —Å –Ω—É–∂–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º."),
  });
  await db.query(
    "UPDATE tasks_status SET user_answer_photo = $1, user_answer_text = $2 AND status = $3 WHERE id = $4",
    [
      photoRes.message?.photo.at(-1)?.file_id || null,
      photoRes.message?.caption || null,
      "checking",
      // @ts-ignore
      ctx.session.taskId,
    ]
  );
  await db.query(
    "INSERT INTO tasks (tasks_status_id, checked_by) VALUES ($1, $2)",
    // @ts-ignore
    [ctx.session.taskId, null]
  );
  await ctx.reply("–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ.", {
    reply_markup: IKUserMenu,
  });
};

const getFriendAnswer = async (
  conversation: MyConversation,
  ctx: MyContext
) => {
  const myKeyboard = new Keyboard()
    .text("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É")
    .text("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è");
  await ctx.reply(
    "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º—É-—Ç–æ.",
    { reply_markup: myKeyboard }
  );
  const res = await conversation.waitFor(":text", {
    otherwise: async (ctx) =>
      await ctx.reply(
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' –∏–ª–∏ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'."
      ),
  });
  let text = res.message?.text;
  while (text !== "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É" && text !== "–ü—Ä–∏—Å–æ–µ–¥–Ω–∏—Ç—å—Å—è") {
    await ctx.reply(
      "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' –∏–ª–∏ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'."
    );
    const res = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply(
          "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' –∏–ª–∏ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'."
        ),
    });
    text = res.message?.text;
  }
  if (text === "–ü—Ä–∏—Å–æ–µ–¥–Ω–∏—Ç—å—Å—è") {
    const myKeyboard = new Keyboard().text("–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É").text("–í –º–µ–Ω—é");
    await ctx.reply(
      "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example.",
      {
        reply_markup: myKeyboard,
      }
    );
    const res = await conversation.waitFor(":text", {
      otherwise: async (ctx) =>
        await ctx.reply(
          "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example.",
          {
            reply_markup: myKeyboard,
          }
        ),
    });
    let nick = res.message?.text;
    let friendShipRes = await db.query(
      "SELECT * FROM friendships WHERE $1 = ANY(users_nicks);",
      [nick]
    );
    while (
      !friendShipRes.rowCount &&
      nick !== "–°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É" &&
      nick !== "–í –º–µ–Ω—é"
    ) {
      await ctx.reply(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∏–∫–∞.",
        {
          reply_markup: myKeyboard,
        }
      );
      const res = await conversation.waitFor(":text", {
        otherwise: async (ctx) =>
          await ctx.reply(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫ –æ–¥–Ω–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ @example.",
            {
              reply_markup: myKeyboard,
            }
          ),
      });
      nick = res.message?.text;
      friendShipRes = await db.query(
        "SELECT * FROM friendships WHERE $1 = ANY(users_nicks);",
        [nick]
      );
    }
    if (nick === "–í –º–µ–Ω—é") {
      await setMenu(ctx);
      return;
    }
    if (friendShipRes.rowCount) {
      const user = await db.query("SELECT * FROM users WHERE id = $1", [
        ctx.from?.id,
      ]);
      await db.query(
        "UPDATE friendships SET users_nicks = $1 AND users_ids = $2 WHERE id = $3",
        [
          [...friendShipRes.rows[0].users_nicks, user.rows[0].nick],
          [...friendShipRes.rows[0].users_nicks, user.rows[0].id],
          friendShipRes.rows[0].id,
        ]
      );
      await db.query("UPDATE users SET friendship_id = $1 WHERE id = $2", [
        friendShipRes.rows[0].id,
        user.rows[0].id,
      ]);
      return;
    }
  }
  await ctx.reply("–û–∫–µ–π, —Å–æ–∑–¥–∞–ª–∏ –ø–æ–¥ –≤–∞—Å –∫–æ–º–∞–Ω–¥—É");
};
bot.use(
  session({
    initial() {
      // return empty object for now
      return {
        addingTaskLevel: 0,
        addingTaskType: "basic",
        taskId: 0,
      };
    },
  }) as Middleware<Context>
);

// Install the conversations plugin.
bot.use(conversations() as Middleware<Context>);
bot.use(createConversation(greeting) as Middleware<Context>);
bot.use(createConversation(createNewTask) as Middleware<Context>);
bot.use(createConversation(getPhotoAnswer) as Middleware<Context>);
bot.use(createConversation(getTextAnswer) as Middleware<Context>);
bot.use(createConversation(getFriendAnswer) as Middleware<Context>);

// HELPERS

async function isSuperAdmin(id: number) {
  try {
    const user = (await db.query(`SELECT * FROM users WHERE id = $1`, [id]))
      .rows[0];
    if (user && user.role === "super_admin") return true;
  } catch (e) {
    return false;
  }
  return false;
}

async function isAdmin(id: number) {
  try {
    const user = (await db.query(`SELECT * FROM users WHERE id = $1`, [id]))
      .rows[0];
    if (!user || user.role === "student") {
      return false;
    }
  } catch (e) {
    return false;
  }
  return true;
}

bot.command("start", async (ctx) => {
  const user = (
    await db.query(`SELECT * FROM users WHERE id = $1`, [ctx.from?.id])
  ).rows[0];
  if (!user) {
    await db.query(
      `INSERT INTO users (id, nick, name, photo, college_group, course, role, points)
  VALUES ($1, $2, $3, $4, $5, $6, $7, $8);`,
      [
        ctx.from?.id,
        (ctx.from?.username || "").toLowerCase(),
        null,
        null,
        null,
        null,
        "student",
        0,
      ]
    );
    await ctx.reply(
      "–ü—Ä–∏–≤–µ—Ç! –î–ª—è —É—á–∞—Å—Ç–∏—è –≤–æ —Ñ–ª–µ—à–º–æ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!"
    );
    // @ts-ignore
    await ctx.conversation.enter("greeting");
    return;
  }
  await setMenu(ctx);
});

const setMenu = async (ctx: Context) => {
  const isAdminRes = await isAdmin(ctx.from?.id || 0);
  try {
    await ctx.editMessageText(
      "üìÉ <b><u>–ú–µ–Ω—é</u></b>",
      isAdminRes
        ? { parse_mode: "HTML", reply_markup: IKAdminMenu }
        : { parse_mode: "HTML", reply_markup: IKUserMenu }
    );
  } catch (e) {
    console.log(e);
    await ctx.reply(
      "üìÉ <b><u>–ú–µ–Ω—é</u></b>",
      isAdminRes
        ? { parse_mode: "HTML", reply_markup: IKAdminMenu }
        : { parse_mode: "HTML", reply_markup: IKUserMenu }
    );
  }
};

bot.on("callback_query:data", async (ctx) => {
  await ctx.answerCallbackQuery();
  const data = ctx.callbackQuery.data;

  const [action, id] = data.split("_");

  switch (action) {
    case "openMenu":
      await setMenu(ctx);
      break;

    case "unlockLevelMenu":
      const settings_ = await db.query("SELECT * FROM settings");
      const curLev = settings_.rows[0].level;
      await ctx.editMessageText(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–≤–µ–Ω—å ${curLev + 1}?`,
        { reply_markup: IKUnlockMenu }
      );
      break;

    case "unlockLevel":
      await ctx.editMessageText(`–ó–∞–≥—Ä—É–∑–∫–∞...`);
      const settings__ = await db.query("SELECT * FROM settings");
      const newLev = settings__.rows[0].level + 1;
      await db.query("UPDATE settings SET level = $1 WHERE id = 1", [newLev]);
      const usersRows = await db.query(
        "SELECT * FROM users WHERE role = 'student'"
      );
      for (const item of usersRows.rows) {
        await bot.api.sendMessage(
          item.id,
          `üéâ –û—Ç–∫—Ä—ã—Ç <b><u>—É—Ä–æ–≤–µ–Ω—å ${newLev}</u></b>!`,
          {
            parse_mode: "HTML",
          }
        );
      }
      await ctx.editMessageText(`üéâ –û—Ç–∫—Ä—ã—Ç <b><u>—É—Ä–æ–≤–µ–Ω—å ${newLev}</u></b>!`, {
        parse_mode: "HTML",
        reply_markup: IKOpenMenu,
      });
      break;

    case "cancelAddingTask":
      // @ts-ignore
      await ctx.conversation.exit("createNewTask");
      break;

    case "superAdminMenu":
      const isAdminRes = await isAdmin(ctx.from?.id || 0);
      await ctx.editMessageText(
        "<b><u>–ú–µ–Ω—é</u></b>",
        isAdminRes
          ? { parse_mode: "HTML", reply_markup: IKAdminMenu }
          : { parse_mode: "HTML", reply_markup: IKAdminMenu }
      );
      break;
    //
    //
    // SUPERADMIN
    //
    case "leaveAdmin":
      await db.query("UPDATE users SET role = $1 WHERE id = $2", [
        "student",
        ctx.from.id,
      ]);
      await ctx.editMessageText("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å! ü´∂üèª");
      await ctx.reply("üìÉ <b><u>–ú–µ–Ω—é</u></b>", {
        reply_markup: IKUserMenu,
        parse_mode: "HTML",
      });
      break;
    case "removeTaskMenu":
      await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
        {
          reply_markup: IKRemoveLevel,
        }
      );
      break;

    case "removeLevel":
      if (id === "cancel") {
        await setMenu(ctx);
        return;
      }
      const items = await db.query(
        "SELECT * FROM level_tasks WHERE level = $1",
        [Number(id)]
      );
      const inlineKeyboard = new InlineKeyboard()
        .text("< –ù–∞–∑–∞–¥", "removeTask_back")
        .row();

      if (!items.rowCount) {
        await ctx.editMessageText("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", {
          reply_markup: inlineKeyboard,
        });
        return;
      }

      items.rows.map((item, index) => {
        const newKeyboard = inlineKeyboard.text(
          `${taskTypeEmoji[item.task_type as keyof typeof taskTypeEmoji]} ${
            item.task
          }`,
          `removeTask_${item.id}`
        );
        if (index % 2) {
          newKeyboard.row();
        }
      });
      await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", {
        reply_markup: inlineKeyboard,
      });
      break;

    case "removeTask":
      if (id === "back") {
        await ctx.editMessageText(
          "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
          {
            reply_markup: IKRemoveLevel,
          }
        );
        return;
      }
      try {
        await db.query("DELETE FROM level_tasks WHERE id = $1", [id]);
        await ctx.editMessageText("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", {
          reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "removeTask_back"),
        });
      } catch (error) {
        const inlineKeyboard = new InlineKeyboard()
          .text("< –ù–∞–∑–∞–¥", "removeTask_back")
          .row();
        await ctx.editMessageText(
          `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ: ${String(error)}.`,
          {
            reply_markup: inlineKeyboard,
          }
        );
      }
      break;

    case "viewTaskMenu":
      await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.",
        {
          reply_markup: IKViewLevel,
        }
      );
      break;

    case "viewLevel":
      if (id === "cancel") {
        await setMenu(ctx);
        return;
      }
      const viewItems = await db.query(
        "SELECT * FROM level_tasks WHERE level = $1",
        [Number(id)]
      );
      const viewInlineKeyboard = new InlineKeyboard()
        .text("< –ù–∞–∑–∞–¥", "viewLevel_cancel")
        .row();

      if (!viewItems.rowCount) {
        await ctx.editMessageText("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", {
          reply_markup: viewInlineKeyboard,
        });
        return;
      }

      viewItems.rows.map((item, index) => {
        const newKeyboard = viewInlineKeyboard.text(
          `${taskTypeEmoji[item.task_type as keyof typeof taskTypeEmoji]} ${
            item.task
          }`,
          `viewTask_${item.id}`
        );
        if (index % 2) {
          newKeyboard.row();
        }
      });
      await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", {
        reply_markup: viewInlineKeyboard,
      });
      break;
      break;
    case "addTaskMenu":
      await ctx.editMessageText(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
        {
          reply_markup: IKAddLevel,
        }
      );
      break;

    case "viewTask":
      break;
    case "addTaskLevel":
      if (id === "cancel") {
        await setMenu(ctx);
        return;
      }
      // @ts-ignore
      ctx.session.addingTaskLevel = id;
      const inlineKeyboardAdd = new InlineKeyboard()
        .text("<br –ù–∞–∑–∞–¥", "addTask_back")
        .row()
        .text("üì∏ –§–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ", "addTask_photo")
        .row()
        .text("üë• –°–æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É", "addTask_friend")
        .row()
        .text("üìù –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "addTask_basic");

      await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.", {
        reply_markup: inlineKeyboardAdd,
      });
      break;

    case "addTask":
      if (id === "back") {
        await ctx.editMessageText(
          "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
          {
            reply_markup: IKAddLevel,
          }
        );
        return;
      }
      // @ts-ignore
      ctx.session.addingTaskType = id;
      // @ts-ignore
      await ctx.conversation.enter("createNewTask");
      break;

    // USER
    case "contacts":
      await ctx.editMessageText(
        `<b><u>–ö–æ–Ω—Ç–∞–∫—Ç—ã</u></b>

ü§ñ –ù–∏–∫ –±–æ—Ç–∞: @iRecognizeSiriusbot;
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: @irinka_potapova;
üìÜ –î–∞—Ç—ã —Ñ–ª–µ—à–º–æ–±–∞: 16 –Ω–æ—è–±. ‚Äì 8 –¥–µ–∫.`,
        {
          parse_mode: "HTML",
          reply_markup: IKOpenMenu,
        }
      );
      break;
    case "rules":
      await ctx.editMessageText(
        `ü§ñ –§–ª–µ—à–º–æ–± <b>¬´–Ø —É–∑–Ω–∞—é –°–∏—Ä–∏—É—Å¬ª</b>

üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <i>11 –Ω–æ—è–±—Ä—è ‚Äì 9 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞</i>

üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>–§–¢ ¬´–°–∏—Ä–∏—É—Å¬ª</b>

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: <i>–æ–±—É—á–∞—é—â–∏–µ—Å—è –ù–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ ¬´–°–∏—Ä–∏—É—Å¬ª</i>

üí¨ –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`,
        {
          parse_mode: "HTML",
          reply_markup: IKRules,
        }
      );
      break;
    case "rulesItem":
      switch (id) {
        case "calendar":
          await ctx.editMessageText(
            `üóì <b><u>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</u></b>

‚úîÔ∏è <b>11 ‚Äì 15 –Ω–æ—è–±—Ä—è</b>: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
‚úîÔ∏è <b>16 ‚Äì 17 –Ω–æ—è–±—Ä—è</b>: —Å—Ç–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –∏ –ø–µ—Ä–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚úîÔ∏è <b>23 ‚Äì 24 –Ω–æ—è–±—Ä—è</b>: —Å—Ç–∞—Ä—Ç –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
‚úîÔ∏è <b>30 –Ω–æ—è–±—Ä—è ‚Äì 1 –¥–µ–∫–∞–±—Ä—è</b>: —Å—Ç–∞—Ä—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —ç—Ç–∞–ø–∞
‚úîÔ∏è <b>8 –¥–µ–∫–∞–±—Ä—è</b>: –æ—á–Ω—ã–π —ç—Ç–∞–ø
‚úîÔ∏è <b>9 –¥–µ–∫–∞–±—Ä—è</b>: –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
‚úîÔ∏è <b>9 ‚Äì 16 –¥–µ–∫–∞–±—Ä—è</b>: –≤—Ä—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ª–∏–¥–µ—Ä–∞–º
`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;
        case "algorithm":
          await ctx.editMessageText(
            `üìã <b><u>–ê–ª–≥–æ—Ä–∏—Ç–º —É—á–∞—Å—Ç–∏—è</u></b>

üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>:
‚úîÔ∏è –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, —É–∫–∞–∑–∞–≤ –ø–æ–ª–Ω–æ–µ –§–ò–û, –≥—Ä—É–ø–ø—É, –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.
‚úîÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ —Å 11 –Ω–æ—è–±—Ä—è –¥–æ 8 –¥–µ–∫–∞–±—Ä—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –º–æ–∂–Ω–æ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ, –Ω–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è.

‚úçÔ∏è <b>–ó–∞–¥–∞–Ω–∏—è</b>:
‚úîÔ∏è –° 16 –Ω–æ—è–±—Ä—è –ø–æ 9 –¥–µ–∫–∞–±—Ä—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ —Å—É–±–±–æ—Ç–∞–º. –ó–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –Ω–µ–¥–µ–ª–∏.
‚úîÔ∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.
‚úîÔ∏è –ó–∞–¥–∞–Ω–∏—è –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3 —Ç–∏–ø–∞:

    üì∏ –§–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏—é –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –µ–µ —Ñ–æ–Ω–µ;

    üë• –°–æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å —Å–µ–±–µ –∫–æ–º–∞–Ω–¥—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—É–¥–µ—Ç–µ –¥–∞–ª—å—à–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è (P.S. –∑–∞ —ç—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥–æ–ø. –±–∞–ª–ª—ã);

    üìù –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –§–¢ ¬´–°–∏—Ä–∏—É—Å¬ª.

    
üö´ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</b>:
‚úîÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ç–æ–º–æ–Ω—Ç–∞–∂–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ó–∞ —ç—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;
        case "steps":
          await ctx.editMessageText(
            `üìã <b><u>üìä –≠—Ç–∞–ø—ã —Ñ–ª–µ—à–º–æ–±–∞</u></b>

1Ô∏è‚É£ <b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø (—Å 16 –Ω–æ—è–±—Ä—è):</b>
‚úîÔ∏è 5 –±–∞–ª–ª–æ–≤ –∑–∞ –≤—ã—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é
‚úîÔ∏è 1 –±–∞–ª–ª –∑–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

2Ô∏è‚É£ <b>–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø (—Å 23 –Ω–æ—è–±—Ä—è):</b>
‚úîÔ∏è 4 –∑–∞–¥–∞–Ω–∏—è –ø–æ 1 –±–∞–ª–ª—É
‚úîÔ∏è 1 –∑–∞–¥–∞–Ω–∏–µ ‚Äì 3 –±–∞–ª–ª–∞
‚úîÔ∏è 2 –∑–∞–¥–∞–Ω–∏—è ‚Äì 5 –±–∞–ª–ª–æ–≤

3Ô∏è‚É£ <b>–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø (—Å 30 –Ω–æ—è–±—Ä—è):</b>
‚úîÔ∏è 6 –∑–∞–¥–∞–Ω–∏–π –ø–æ 1 –±–∞–ª–ª—É
‚úîÔ∏è 1 –∑–∞–¥–∞–Ω–∏–µ ‚Äì 3 –±–∞–ª–ª–∞
‚úîÔ∏è 3 –∑–∞–¥–∞–Ω–∏—è –ø–æ 5 –±–∞–ª–ª–æ–≤

4Ô∏è‚É£ <b>–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–ø (—Å 7 –¥–µ–∫–∞–±—Ä—è):</b>
‚úîÔ∏è 3 –∑–∞–¥–∞–Ω–∏—è, 1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥–æ–µ.

‚ÑπÔ∏è <b>–û—á–Ω—ã–π —Ñ–∏–Ω–∞–ª (8 –¥–µ–∫–∞–±—Ä—è):</b>
‚úîÔ∏è 5 –∑–∞–¥–∞–Ω–∏–π, 5 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;

        case "results":
          await ctx.editMessageText(
            `üìã <b><u>üìä üèÜ –ò—Ç–æ–≥–∏</u></b>

üéâ <u><i>9 –¥–µ–∫–∞–±—Ä—è</i></u> –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –±–∞–ª–ª–∞–º–∏.

üéÅ –ù–∞–≥—Ä–∞–∂–¥–∞—é—Ç—Å—è <b>–∫–æ–º–∞–Ω–¥—ã-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü—ã</b> (–æ—Ç 5 –¥–æ 10 –∫–æ–º–∞–Ω–¥) –∏ –∏–≥—Ä–æ–∫ —Å <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º</b> –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤.`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;
        default:
          await ctx.editMessageText(
            `ü§ñ –§–ª–µ—à–º–æ–± <b>¬´–Ø —É–∑–Ω–∞—é –°–∏—Ä–∏—É—Å¬ª</b>

üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <i>11 –Ω–æ—è–±—Ä—è ‚Äì 9 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞</i>

üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>–§–¢ ¬´–°–∏—Ä–∏—É—Å¬ª</b>

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: <i>–æ–±—É—á–∞—é—â–∏–µ—Å—è –ù–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ ¬´–°–∏—Ä–∏—É—Å¬ª</i>

üí¨ –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`,
            {
              parse_mode: "HTML",
              reply_markup: IKRules,
            }
          );
          break;
      }
      break;
    case "rating":
      const points = (
        await db.query("SELECT * FROM users WHERE id = $1", [ctx.from.id])
      ).rows[0].points;
      console.log(points);
      const maxRating = await db.query(`SELECT *
FROM users
ORDER BY points DESC
LIMIT 10;`);

      await ctx.editMessageText(
        `<b><u>üìä –†–µ–π—Ç–∏–Ω–≥</u></b>

‚úçÔ∏è –£ –≤–∞—Å <b>${plural(points || 0, "%d –±–∞–ª–ª", "%d –±–∞–ª–ª–∞", "%d –±–∞–ª–ª–æ–≤")}</b>

<i>P.S. –ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—è—Å—å –≤ –∫–æ–º–∞–Ω—ã –∏ –ø—Ä–∏–¥—è –Ω–∞ –æ—á–Ω—ã–π —ç—Ç–∞–ø!</i>`,
        {
          reply_markup: IKOpenMenu,
          parse_mode: "HTML",
        }
      );
      break;
    case "levels":
      const allLevels = await db.query(
        "SELECT * FROM tasks_status WHERE user_id = $1",
        [ctx.from.id]
      );
      const settings = await db.query("SELECT * FROM settings");

      await ctx.editMessageText("üî¢ <b><u>–£—Ä–æ–≤–Ω–∏</u></b>", {
        reply_markup: new InlineKeyboard()
          .text(
            `${
              !allLevels.rows.filter(
                (el) => el.level === 0 && el.status !== "completed"
              ).length
                ? "‚úÖ "
                : ""
            }–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å`,
            "levelMenu_0"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 1
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) => el.level === 0 && el.status !== "completed"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) => el.level === 1 && el.status !== "completed"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 1`,
            settings.rows[0].level < 1 ||
              allLevels.rows.filter(
                (el) => el.level === 0 && el.status !== "completed"
              ).length
              ? "nothing"
              : "levelMenu_1"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 2
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) => el.level === 1 && el.status !== "completed"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) => el.level === 2 && el.status !== "completed"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 2`,
            settings.rows[0].level < 2 ||
              allLevels.rows.filter(
                (el) => el.level === 1 && el.status !== "completed"
              ).length
              ? "nothing"
              : "levelMenu_2"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 3
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) => el.level === 2 && el.status !== "completed"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) => el.level === 3 && el.status !== "completed"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 3`,
            settings.rows[0].level < 3 ||
              allLevels.rows.filter(
                (el) => el.level === 2 && el.status !== "completed"
              ).length
              ? "nothing"
              : "levelMenu_3"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 4
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) => el.level === 3 && el.status !== "completed"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) => el.level === 4 && el.status !== "completed"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 4`,
            settings.rows[0].level < 4 ||
              allLevels.rows.filter(
                (el) => el.level === 3 && el.status !== "completed"
              ).length
              ? "nothing"
              : "levelMenu_4"
          )
          .row()
          .text("–í –º–µ–Ω—é", "openMenu"),
        parse_mode: "HTML",
      });
      break;
    case "levelMenu":
      const levelTasks = (
        await db.query(
          "SELECT * FROM tasks_status WHERE user_id = $1 AND level = $2",
          [ctx.from.id, id]
        )
      ).rows;
      const tasks = (
        await db.query(
          `SELECT * FROM level_tasks WHERE id in (${levelTasks
            .map((_, index) => `$${index + 1}`)
            .join(", ")})`,
          levelTasks.map((el) => el.task_id)
        )
      ).rows;
      const tasksKeyboard = new InlineKeyboard();

      tasks.forEach((item, index) => {
        const levelItem = levelTasks.find((el) => el.task_id === item.id);
        if (levelItem)
          tasksKeyboard
            .text(
              `${
                tasksKeyboardEmoji[
                  levelItem.status as keyof typeof tasksKeyboardEmoji
                ]
              } ${
                tasksKeyboardName[
                  item.task_type as keyof typeof tasksKeyboardName
                ]
              } ${index + 1}`,
              levelItem.status !== "not completed"
                ? "nothing"
                : `task_${levelItem.id}`
            )
            .row();
      });
      tasksKeyboard.text("< –ù–∞–∑–∞–¥", "levels");
      await ctx.editMessageText(
        id === "0" ? "–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å" : `–£—Ä–æ–≤–µ–Ω—å ${id}`,
        {
          reply_markup: tasksKeyboard,
        }
      );
      break;
    case "task":
      const taskLevel = (
        await db.query("SELECT * FROM tasks_status WHERE id = $1", [id])
      ).rows[0];
      const task = (
        await db.query("SELECT * FROM level_tasks WHERE id = $1", [
          taskLevel.task_id,
        ])
      ).rows[0];
      await ctx.editMessageText(
        `${taskTypeText[task.task_type as keyof typeof taskTypeText]}

‚úèÔ∏è –ó–∞–¥–∞–Ω–∏–µ: ${task.task}
${
  task.description
    ? `
üìë –û–ø–∏—Å–∞–Ω–∏–µ: ${task.description}`
    : ""
}`
      );
      if (task.photo) {
        await ctx.replyWithPhoto(task.photo);
      }
      // @ts-ignore
      ctx.session.taskId = id;
      switch (task.task_type) {
        case "photo":
          // @ts-ignore
          await ctx.conversation.enter("getPhotoAnswer");
          break;
        case "basic":
          // @ts-ignore
          await ctx.conversation.enter("getTextAnswer");
          break;
        case "friend":
          // @ts-ignore
          await ctx.conversation.enter("getFriendAnswer");
          break;
        default:
          break;
      }

    default:
      break;
  }
});

bot.catch((ctx) => {
  console.log(ctx.error);
  fs.appendFile(
    "botError.txt",
    `\n\n${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}: ${
      ctx.error
    }`,
    () => {}
  );
});

bot.command("menu", async (ctx) => {
  try {
    await setMenu(ctx);
  } catch (e) {
    console.log(e);
    const isAdminRes = await isAdmin(ctx.from?.id || 0);
    await ctx.reply("<b><u>–ú–µ–Ω—é</u></b>", {
      parse_mode: "HTML",
      reply_markup: isAdminRes ? IKAdminMenu : IKAdminMenu,
    });
  }
});

bot.start({
  allowed_updates: API_CONSTANTS.ALL_UPDATE_TYPES,
  onStart: async () => {
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
    try {
      await db.query("SELECT * FROM users");
    } catch (e) {
      await db.query(`CREATE TABLE users (
  ID SERIAL PRIMARY KEY,
  nick VARCHAR(100),
  name VARCHAR(100),
  photo VARCHAR(100),
  college_group VARCHAR(15),
  course INT,
  role VARCHAR(15),
  friendship_id INT,
  points INT
)`);
    }
    try {
      await db.query("SELECT * FROM tasks_status");
    } catch (e) {
      await db.query(`CREATE TABLE tasks_status (
  ID SERIAL PRIMARY KEY,
  task_id INT,
  user_id INT,
  status VARCHAR(15),
  friendship_id INT,
  level INT,
  user_answer_photo VARCHAR(100),
  user_answer_text VARCHAR(5000)
)`);
    }
    try {
      await db.query("SELECT * FROM level_tasks");
    } catch (e) {
      await db.query(`
        CREATE TABLE level_tasks (
  ID SERIAL PRIMARY KEY,
  task_type VARCHAR(10),
  task VARCHAR(500),
  task_description VARCHAR(5000),
  answer VARCHAR(500),
  photo VARCHAR(100),
  level INT,
  is_open BOOLEAN
)`);
    }
    try {
      await db.query("SELECT * FROM friendships");
    } catch (e) {
      await db.query(`CREATE TABLE friendships (
  ID SERIAL PRIMARY KEY,
  users_nicks VARCHAR(100)[],
  users_ids INT[],
  waiting_ids INT[]
)`);
    }
    try {
      await db.query("SELECT * FROM tasks");
    } catch (e) {
      await db.query(`CREATE TABLE tasks (
  id SERIAL PRIMARY KEY,
  tasks_status_id INT,
  checked_by INT
)`);
    }
    try {
      await db.query("SELECT * FROM settings");
    } catch (e) {
      await db.query(`CREATE TABLE settings (
  ID SERIAL PRIMARY KEY,
  level INT
  )`);
    }
    try {
      await db.query("SELECT * FROM team_names");
    } catch (e) {
      await db.query(`CREATE TABLE team_names (
  ID SERIAL PRIMARY KEY,
  name VARCHAR(50),
  is_busy BOOLEAN
  )`);
    }
  },
});
