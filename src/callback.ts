import { Context, InlineKeyboard } from "grammy";
import {
  bot,
  MyContext,
  tasksKeyboardEmoji,
  tasksKeyboardName,
  taskTypeEmoji,
  taskTypeText,
} from "./constants";
import { db } from "./db";
import { checkFriendship, reviewTask } from "./helpers";
import {
  IKUnlockMenu,
  IKOpenMenu,
  IKAdminMenu,
  IKUserMenu,
  IKRemoveLevel,
  IKViewLevel,
  IKAddLevel,
  IKRules,
  IKUserFriendshipMenu,
} from "./keyboards";
import { setMenu } from "./utils";
import plural from "plural-ru";
import {
  SELECT_SETTINGS,
  SELECT_USER,
  SELECT_USER_STUDENT,
} from "./sqlQueries";
import format from "pg-format";

export const callbackData = async (ctx: Context) => {
  await ctx.answerCallbackQuery();
  if (!ctx.callbackQuery) return;
  const data = ctx.callbackQuery.data!;

  const [action, id] = data.split("_");

  switch (action) {
    case "openMenu":
      await setMenu(ctx);
      break;

    case "myFriendship":
      const user = await db.query(SELECT_USER, [ctx.from?.id]);
      const friendship = await db.query(
        "SELECT * FROM friendships WHERE id = $1",
        [user.rows[0].friendship_id]
      );
      const friends = [];
      for (const f of friendship.rows[0].users_ids) {
        const friend = await db.query(SELECT_USER, [f]);
        friends.push(friend.rows[0]);
      }
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        `<b><u>–ú–æ—è –∫–æ–º–∞–Ω–¥–∞</u></b>: 

–ù–∞–∑–≤–∞–Ω–∏–µ: ${friendship.rows[0].name}

ID: ${friendship.rows[0].id}

–£—á–∞—Å—Ç–Ω–∏–∫–∏:
${friends
  .map(
    (item, index) =>
      `${index + 1}. ${item.name} - ${item.nick ? `@${item.nick}` : "–ë–µ–∑ –Ω–∏–∫–∞"}`
  )
  .join("\n")}`,
        {
          parse_mode: "HTML",
          reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "openMenu"),
        }
      );
      break;
    case "unlockLevelMenu":
      const settings_ = await db.query(SELECT_SETTINGS);
      const curLev = settings_.rows[0].level;
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–≤–µ–Ω—å ${
          curLev + 1 === 5 ? '"–§–∏–Ω–∞–ª"' : curLev + 1
        }?`,
        { reply_markup: IKUnlockMenu }
      );
      break;

    case "unlockLevel":
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(`–ó–∞–≥—Ä—É–∑–∫–∞...`);
      const settings__ = await db.query(SELECT_SETTINGS);
      const newLev = settings__.rows[0].level + 1;
      await db.query("UPDATE settings SET level = $1 WHERE id = 1", [newLev]);
      const usersRows = await db.query(SELECT_USER_STUDENT);
      for (const item of usersRows.rows) {
        await bot.api.sendMessage(
          item.id,
          `üéâ –û—Ç–∫—Ä—ã—Ç <b><u>—É—Ä–æ–≤–µ–Ω—å ${
            newLev === 5 ? '"–§–∏–Ω–∞–ª"' : newLev
          }</u></b>!`,
          {
            parse_mode: "HTML",
          }
        );
      }
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        `üéâ –û—Ç–∫—Ä—ã—Ç <b><u>—É—Ä–æ–≤–µ–Ω—å ${newLev === 5 ? '"–§–∏–Ω–∞–ª"' : newLev}</u></b>!`,
        {
          parse_mode: "HTML",
          reply_markup: IKOpenMenu,
        }
      );
      break;

    case "cancelAddingTask":
      // @ts-ignore
      await ctx.conversation.exit("createNewTask");
      break;
    case "reviewTasks":
      return reviewTask(ctx as MyContext);
    case "leaveAdmin":
      await db.query("UPDATE users SET role = $1 WHERE id = $2", [
        "student",
        ctx.from?.id,
      ]);
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å! ü´∂üèª");
      await ctx.reply("üìÉ <b><u>–ú–µ–Ω—é</u></b>", {
        reply_markup: IKUserMenu,
        parse_mode: "HTML",
      });
      break;
    case "removeTaskMenu":
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.", {
        reply_markup: IKRemoveLevel,
      });
      break;

    case "removeLevel":
      if (id === "cancel") {
        await setMenu(ctx);
        return;
      }
      const items = await db.query(
        "SELECT * FROM level_tasks WHERE level = $1",
        [Number(id)]
      );
      const inlineKeyboard = new InlineKeyboard()
        .text("< –ù–∞–∑–∞–¥", "removeTask_back")
        .row();

      if (!items.rowCount) {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", {
          reply_markup: inlineKeyboard,
        });
        return;
      }

      items.rows.map((item, index) => {
        const newKeyboard = inlineKeyboard.text(
          `${taskTypeEmoji[item.task_type as keyof typeof taskTypeEmoji]} ${
            item.task
          }`,
          `removeTask_${item.id}`
        );
        if (index % 2) {
          newKeyboard.row();
        }
      });
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.", {
        reply_markup: inlineKeyboard,
      });
      break;

    case "removeTask":
      if (id === "back") {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply(
          "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
          {
            reply_markup: IKRemoveLevel,
          }
        );
        return;
      }
      try {
        await db.query("DELETE FROM level_tasks WHERE id = $1", [id]);
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", {
          reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "removeTask_back"),
        });
      } catch (error) {
        const inlineKeyboard = new InlineKeyboard()
          .text("< –ù–∞–∑–∞–¥", "removeTask_back")
          .row();
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ: ${String(error)}.`, {
          reply_markup: inlineKeyboard,
        });
      }
      break;

    case "viewTaskMenu":
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", {
        reply_markup: IKViewLevel,
      });
      break;

    case "viewLevel":
      if (id === "cancel") {
        await setMenu(ctx);
        return;
      }
      const viewItems = await db.query(
        "SELECT * FROM level_tasks WHERE level = $1",
        [Number(id)]
      );
      const viewInlineKeyboard = new InlineKeyboard()
        .text("< –ù–∞–∑–∞–¥", "viewLevel_cancel")
        .row();

      if (!viewItems.rowCount) {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.", {
          reply_markup: viewInlineKeyboard,
        });
        return;
      }

      viewItems.rows.map((item, index) => {
        const newKeyboard = viewInlineKeyboard.text(
          `${taskTypeEmoji[item.task_type as keyof typeof taskTypeEmoji]} ${
            item.task
          }`,
          `viewTask_${item.id}`
        );
        if (index % 2) {
          newKeyboard.row();
        }
      });
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å.", {
        reply_markup: viewInlineKeyboard,
      });
      break;
    case "viewTask":
      if (id === "cancel") {
        await setMenu(ctx);
        return;
      }

      const viewItemInlineKeyboard = new InlineKeyboard()
        .text("< –ù–∞–∑–∞–¥", "viewTask_cancel")
        .row()
        .text("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", `removeTask_${id}`);
      const task_ = await db.query("SELECT * FROM level_tasks WHERE id = $1", [
        id,
      ]);
      if (task_.rows[0].photo) {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.replyWithPhoto(task_.rows[0].photo, {
          caption: `${
            taskTypeText[task_.rows[0].task_type as keyof typeof taskTypeText]
          }

‚úèÔ∏è –ó–∞–¥–∞–Ω–∏–µ: ${task_.rows[0].task}
${
  task_.rows[0].task_description
    ? `
üìë –û–ø–∏—Å–∞–Ω–∏–µ: ${task_.rows[0].task_description}`
    : ""
}
‚ùóÔ∏è –û—Ç–≤–µ—Ç: ${task_.rows[0].answer}`,
          reply_markup: viewItemInlineKeyboard,
        });
      } else {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply(
          `${taskTypeText[task_.rows[0].task_type as keyof typeof taskTypeText]}

‚úèÔ∏è –ó–∞–¥–∞–Ω–∏–µ: ${task_.rows[0].task}
${
  task_.rows[0].task_description
    ? `
üìë –û–ø–∏—Å–∞–Ω–∏–µ: ${task_.rows[0].task_description}`
    : ""
}

‚ùóÔ∏è –û—Ç–≤–µ—Ç: ${task_.rows[0].answer}`,
          { reply_markup: viewItemInlineKeyboard }
        );
      }
      break;
    case "addTaskMenu":
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.", {
        reply_markup: IKAddLevel,
      });
      break;

    case "addTaskLevel":
      if (id === "cancel") {
        await setMenu(ctx);
        return;
      }
      // @ts-ignore
      ctx.session.addingTaskLevel = id;
      const inlineKeyboardAdd = new InlineKeyboard()
        .text("< –ù–∞–∑–∞–¥", "addTask_back")
        .row()
        .text("üì∏ –§–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ", "addTask_photo")
        .row()
        .text("üë• –°–æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É", "addTask_friend")
        .row()
        .text("üìù –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "addTask_basic");

      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.", {
        reply_markup: inlineKeyboardAdd,
      });
      break;

    case "addTask":
      if (id === "back") {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply(
          "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ.",
          {
            reply_markup: IKAddLevel,
          }
        );
        return;
      }
      // @ts-ignore
      ctx.session.addingTaskType = id;
      // @ts-ignore
      await ctx.conversation.enter("createNewTask");
      break;

    // USER
    case "contacts":
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        `<b><u>–ö–æ–Ω—Ç–∞–∫—Ç—ã</u></b>

ü§ñ –ù–∏–∫ –±–æ—Ç–∞: @iRecognizeSiriusbot;
üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: @irinka_potapova;
üìÜ –î–∞—Ç—ã —Ñ–ª–µ—à–º–æ–±–∞: 21 –Ω–æ—è–±. ‚Äì 8 –¥–µ–∫.`,
        {
          parse_mode: "HTML",
          reply_markup: IKOpenMenu,
        }
      );
      break;
    case "rules":
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        `ü§ñ –§–ª–µ—à–º–æ–± <b>¬´–Ø —É–∑–Ω–∞—é –°–∏—Ä–∏—É—Å¬ª</b>

üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <i>21 –Ω–æ—è–±—Ä—è ‚Äì 9 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞</i>

üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>–§–¢ ¬´–°–∏—Ä–∏—É—Å¬ª</b>

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: <i>–æ–±—É—á–∞—é—â–∏–µ—Å—è –ù–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ ¬´–°–∏—Ä–∏—É—Å¬ª</i>

üí¨ –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`,
        {
          parse_mode: "HTML",
          reply_markup: IKRules,
        }
      );
      break;
    case "rulesItem":
      switch (id) {
        case "calendar":
          try {
            await ctx.editMessageReplyMarkup();
          } catch {}
          await ctx.reply(
            `üóì <b><u>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</u></b>

‚úîÔ∏è <b>c 21 –Ω–æ—è–±—Ä—è</b>: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
‚úîÔ∏è <b>c 21 –Ω–æ—è–±—Ä—è</b>: —Å—Ç–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞ –∏ –ø–µ—Ä–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
‚úîÔ∏è <b>23 ‚Äì 24 –Ω–æ—è–±—Ä—è</b>: —Å—Ç–∞—Ä—Ç –≤—Ç–æ—Ä–æ–≥–æ —ç—Ç–∞–ø–∞
‚úîÔ∏è <b>30 –Ω–æ—è–±—Ä—è ‚Äì 1 –¥–µ–∫–∞–±—Ä—è</b>: —Å—Ç–∞—Ä—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —ç—Ç–∞–ø–∞
‚úîÔ∏è <b>8 –¥–µ–∫–∞–±—Ä—è</b>: –æ—á–Ω—ã–π —ç—Ç–∞–ø
‚úîÔ∏è <b>9 –¥–µ–∫–∞–±—Ä—è</b>: –ø–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
‚úîÔ∏è <b>9 ‚Äì 16 –¥–µ–∫–∞–±—Ä—è</b>: –≤—Ä—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –ª–∏–¥–µ—Ä–∞–º
`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;
        case "algorithm":
          try {
            await ctx.editMessageReplyMarkup();
          } catch {}
          await ctx.reply(
            `üìã <b><u>–ê–ª–≥–æ—Ä–∏—Ç–º —É—á–∞—Å—Ç–∏—è</u></b>

üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>:
‚úîÔ∏è –ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ, —É–∫–∞–∑–∞–≤ –ø–æ–ª–Ω–æ–µ –§–ò–û, –≥—Ä—É–ø–ø—É, –∫—É—Ä—Å –∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω–æ–µ —Ñ–æ—Ç–æ.
‚úîÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ —Å 21 –Ω–æ—è–±—Ä—è –¥–æ 8 –¥–µ–∫–∞–±—Ä—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –º–æ–∂–Ω–æ –Ω–∞ –ª—é–±–æ–º —ç—Ç–∞–ø–µ, –Ω–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è.

‚úçÔ∏è <b>–ó–∞–¥–∞–Ω–∏—è</b>:
‚úîÔ∏è –° 16 –Ω–æ—è–±—Ä—è –ø–æ 9 –¥–µ–∫–∞–±—Ä—è –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ —Å—É–±–±–æ—Ç–∞–º. –ó–∞–¥–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –Ω–µ–¥–µ–ª–∏.
‚úîÔ∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω, –Ω–æ —ç—Ç–æ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.
‚úîÔ∏è –ó–∞–¥–∞–Ω–∏—è –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3 —Ç–∏–ø–∞:

    üì∏ –§–æ—Ç–æ-–∑–∞–¥–∞–Ω–∏–µ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –ª–æ–∫–∞—Ü–∏—é –∏ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –µ–µ —Ñ–æ–Ω–µ;

    üë• –°–æ–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±—Ä–∞—Ç—å —Å–µ–±–µ –∫–æ–º–∞–Ω–¥—É, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã –±—É–¥–µ—Ç–µ –¥–∞–ª—å—à–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è (P.S. –∑–∞ —ç—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –¥–æ–ø. –±–∞–ª–ª—ã);

    üìù –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –§–¢ ¬´–°–∏—Ä–∏—É—Å¬ª.

    
üö´ <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è</b>:
‚úîÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Ñ–æ—Ç–æ–º–æ–Ω—Ç–∞–∂–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ó–∞ —ç—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;
        case "steps":
          try {
            await ctx.editMessageReplyMarkup();
          } catch {}
          await ctx.reply(
            `üìã <b><u>üìä –≠—Ç–∞–ø—ã —Ñ–ª–µ—à–º–æ–±–∞</u></b>

1Ô∏è‚É£ <b>–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø (—Å 21 –Ω–æ—è–±—Ä—è):</b>
‚úîÔ∏è 5 –±–∞–ª–ª–æ–≤ –∑–∞ –≤—ã—Ö–æ–¥ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é
‚úîÔ∏è 1 –±–∞–ª–ª –∑–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

2Ô∏è‚É£ <b>–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø (—Å 23 –Ω–æ—è–±—Ä—è):</b>
‚úîÔ∏è 4 –∑–∞–¥–∞–Ω–∏—è –ø–æ 1 –±–∞–ª–ª—É
‚úîÔ∏è 1 –∑–∞–¥–∞–Ω–∏–µ ‚Äì 3 –±–∞–ª–ª–∞
‚úîÔ∏è 2 –∑–∞–¥–∞–Ω–∏—è ‚Äì 5 –±–∞–ª–ª–æ–≤

3Ô∏è‚É£ <b>–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø (—Å 30 –Ω–æ—è–±—Ä—è):</b>
‚úîÔ∏è 6 –∑–∞–¥–∞–Ω–∏–π –ø–æ 1 –±–∞–ª–ª—É
‚úîÔ∏è 1 –∑–∞–¥–∞–Ω–∏–µ ‚Äì 3 –±–∞–ª–ª–∞
‚úîÔ∏è 3 –∑–∞–¥–∞–Ω–∏—è –ø–æ 5 –±–∞–ª–ª–æ–≤

4Ô∏è‚É£ <b>–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —ç—Ç–∞–ø (—Å 7 –¥–µ–∫–∞–±—Ä—è):</b>
‚úîÔ∏è 3 –∑–∞–¥–∞–Ω–∏—è, 1 –±–∞–ª–ª –∑–∞ –∫–∞–∂–¥–æ–µ.

‚ÑπÔ∏è <b>–û—á–Ω—ã–π —Ñ–∏–Ω–∞–ª (8 –¥–µ–∫–∞–±—Ä—è):</b>
‚úîÔ∏è 5 –∑–∞–¥–∞–Ω–∏–π, 5 –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–µ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;

        case "results":
          try {
            await ctx.editMessageReplyMarkup();
          } catch {}
          await ctx.reply(
            `üìã <b><u>üìä üèÜ –ò—Ç–æ–≥–∏</u></b>

üéâ <u><i>9 –¥–µ–∫–∞–±—Ä—è</i></u> –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å –±–∞–ª–ª–∞–º–∏.

üéÅ –ù–∞–≥—Ä–∞–∂–¥–∞—é—Ç—Å—è <b>–∫–æ–º–∞–Ω–¥—ã-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å–Ω–∏—Ü—ã</b> (–æ—Ç 5 –¥–æ 10 –∫–æ–º–∞–Ω–¥) –∏ –∏–≥—Ä–æ–∫ —Å <b>–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º</b> –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤.`,
            {
              parse_mode: "HTML",
              reply_markup: new InlineKeyboard().text("< –ù–∞–∑–∞–¥", "rules"),
            }
          );
          break;
        default:
          try {
            await ctx.editMessageReplyMarkup();
          } catch {}
          await ctx.reply(
            `ü§ñ –§–ª–µ—à–º–æ–± <b>¬´–Ø —É–∑–Ω–∞—é –°–∏—Ä–∏—É—Å¬ª</b>

üìÖ –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <i>21 –Ω–æ—è–±—Ä—è ‚Äì 9 –¥–µ–∫–∞–±—Ä—è 2024 –≥–æ–¥–∞</i>

üìç –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: <b>–§–¢ ¬´–°–∏—Ä–∏—É—Å¬ª</b>

üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: <i>–æ–±—É—á–∞—é—â–∏–µ—Å—è –ù–∞—É—á–Ω–æ-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ ¬´–°–∏—Ä–∏—É—Å¬ª</i>

üí¨ –£–¥–∞—á–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!`,
            {
              parse_mode: "HTML",
              reply_markup: IKRules,
            }
          );
          break;
      }
      break;
    case "rating":
      const points = (await db.query(SELECT_USER, [ctx.from?.id])).rows[0]
        .points;
      console.log(points);
      const maxRating = await db.query(`SELECT *
FROM users
ORDER BY points DESC
LIMIT 10;`);

      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        `<b><u>üìä –†–µ–π—Ç–∏–Ω–≥</u></b>

‚úçÔ∏è –£ –≤–∞—Å <b>${plural(points || 0, "%d –±–∞–ª–ª", "%d –±–∞–ª–ª–∞", "%d –±–∞–ª–ª–æ–≤")}</b>

<i>P.S. –ë–∞–ª–ª—ã –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è, –æ–±—ä–µ–¥–∏–Ω—è—è—Å—å –≤ –∫–æ–º–∞–Ω—ã –∏ –ø—Ä–∏–¥—è –Ω–∞ –æ—á–Ω—ã–π —ç—Ç–∞–ø!</i>`,
        {
          reply_markup: IKOpenMenu,
          parse_mode: "HTML",
        }
      );
      break;
    case "skipTaskConfirm":
      // @ts-ignore
      await ctx.conversation.exit();
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ? –í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–º—É.",
        {
          reply_markup: new InlineKeyboard()
            .text("‚ö´Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", `skipTask_${id}`)
            .row()
            .text("< –û—Ç–º–µ–Ω–∞", `task_${id}`),
        }
      );
      break;
    case "skipTask":
      await db.query("UPDATE tasks_status SET status = $1 WHERE id = $2", [
        "skipped",
        id,
      ]);
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ, –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Å–ª–µ–¥—É—é—â–∏–º!");
      await setMenu(ctx);
      break;
    case "levels":
      const allLevels = await db.query(
        "SELECT * FROM tasks_status WHERE user_id = $1",
        [ctx.from?.id]
      );
      const settings = await db.query("SELECT * FROM settings");
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("üî¢ <b><u>–£—Ä–æ–≤–Ω–∏</u></b>", {
        reply_markup: new InlineKeyboard()
          .text(
            `${
              !allLevels.rows.filter(
                (el) =>
                  el.level === 0 &&
                  el.status !== "completed" &&
                  el.status !== "skipped"
              ).length
                ? "‚úÖ "
                : ""
            }–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å`,
            "levelMenu_0"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 1
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) =>
                      el.level === 0 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) =>
                      el.level === 1 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 1`,
            settings.rows[0].level < 1 ||
              allLevels.rows.filter(
                (el) =>
                  el.level === 0 &&
                  el.status !== "completed" &&
                  el.status !== "skipped"
              ).length
              ? "nothing"
              : "levelMenu_1"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 2
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) =>
                      el.level === 1 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) =>
                      el.level === 2 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 2`,
            settings.rows[0].level < 2 ||
              allLevels.rows.filter(
                (el) =>
                  el.level === 1 &&
                  el.status !== "completed" &&
                  el.status !== "skipped"
              ).length
              ? "nothing"
              : "levelMenu_2"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 3
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) =>
                      el.level === 2 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) =>
                      el.level === 3 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 3`,
            settings.rows[0].level < 3 ||
              allLevels.rows.filter(
                (el) =>
                  el.level === 2 &&
                  el.status !== "completed" &&
                  el.status !== "skipped"
              ).length
              ? "nothing"
              : "levelMenu_3"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 4
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) =>
                      el.level === 3 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) =>
                      el.level === 4 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "‚úÖ "
                : ""
            }–£—Ä–æ–≤–µ–Ω—å 4`,
            settings.rows[0].level < 4 ||
              allLevels.rows.filter(
                (el) =>
                  el.level === 3 &&
                  el.status !== "completed" &&
                  el.status !== "skipped"
              ).length
              ? "nothing"
              : "levelMenu_4"
          )
          .row()
          .text(
            `${
              settings.rows[0].level < 5
                ? "üö´ "
                : allLevels.rows.filter(
                    (el) =>
                      el.level === 4 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "üîí "
                : !allLevels.rows.filter(
                    (el) =>
                      el.level === 5 &&
                      el.status !== "completed" &&
                      el.status !== "skipped"
                  ).length
                ? "‚úÖ "
                : ""
            }–§–∏–Ω–∞–ª`,
            settings.rows[0].level < 5 ||
              allLevels.rows.filter(
                (el) =>
                  el.level === 4 &&
                  el.status !== "completed" &&
                  el.status !== "skipped"
              ).length
              ? "nothing"
              : "levelMenu_5"
          )
          .row()
          .text("–í –º–µ–Ω—é", "openMenu"),
        parse_mode: "HTML",
      });
      break;
    case "levelMenu":
      const levelTasks = (
        await db.query(
          "SELECT * FROM tasks_status WHERE user_id = $1 AND level = $2 ORDER BY id ASC",
          [ctx.from?.id, id]
        )
      ).rows;
      const tasks = (
        await db.query(
          `SELECT * FROM level_tasks WHERE id in (${levelTasks
            .map((_, index) => `$${index + 1}`)
            .join(", ")})`,
          levelTasks.map((el) => el.task_id)
        )
      ).rows;
      const tasksKeyboard = new InlineKeyboard();

      tasks.forEach((item, index) => {
        const levelItem = levelTasks.find((el) => el.task_id === item.id);
        if (levelItem)
          tasksKeyboard
            .text(
              `${
                tasksKeyboardEmoji[
                  levelItem.status as keyof typeof tasksKeyboardEmoji
                ]
              } ${
                tasksKeyboardName[
                  item.task_type as keyof typeof tasksKeyboardName
                ]
              } ${index + 1}`,
              levelItem.status !== "not completed"
                ? "nothing"
                : `task_${levelItem.id}`
            )
            .row();
      });
      tasksKeyboard.text("< –ù–∞–∑–∞–¥", "levels");
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply(
        id === "0"
          ? "–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
          : `–£—Ä–æ–≤–µ–Ω—å ${id === "5" ? '"–§–∏–Ω–∞–ª"' : id}`,
        {
          reply_markup: tasksKeyboard,
        }
      );
      break;
    case "task":
      const taskLevel = (
        await db.query("SELECT * FROM tasks_status WHERE id = $1", [id])
      ).rows[0];
      const task = (
        await db.query("SELECT * FROM level_tasks WHERE id = $1", [
          taskLevel.task_id,
        ])
      ).rows[0];
      if (task.photo) {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.replyWithPhoto(task.photo, {
          reply_markup: new InlineKeyboard().text(
            "‚ö´Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è",
            `skipTaskConfirm_${id}`
          ),
          caption: `${taskTypeText[task.task_type as keyof typeof taskTypeText]}

‚úèÔ∏è –ó–∞–¥–∞–Ω–∏–µ: ${task.task}
${
  task.task_description
    ? `
üìë –û–ø–∏—Å–∞–Ω–∏–µ: ${task.task_description}`
    : ""
}`,
        });
      } else {
        try {
          await ctx.editMessageReplyMarkup();
        } catch {}
        await ctx.reply(
          `${taskTypeText[task.task_type as keyof typeof taskTypeText]}
  
  ‚úèÔ∏è –ó–∞–¥–∞–Ω–∏–µ: ${task.task}
  ${
    task.task_description
      ? `
  üìë –û–ø–∏—Å–∞–Ω–∏–µ: ${task.task_description}`
      : ""
  }`,
          {
            reply_markup: new InlineKeyboard().text(
              "‚ö´Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞–Ω–∏—è",
              `skipTaskConfirm_${id}`
            ),
          }
        );
      }
      // @ts-ignore
      ctx.session.taskId = id;
      switch (task.task_type) {
        case "photo":
          // @ts-ignore
          await ctx.conversation.enter("getPhotoAnswer");
          break;
        case "basic":
          // @ts-ignore
          await ctx.conversation.enter("getTextAnswer");
          break;
        case "friend":
          // @ts-ignore
          await ctx.conversation.enter("getFriendAnswer");
          break;
        default:
          break;
      }
      break;
    case "reviewAccept":
      await db.query(
        "UPDATE tasks SET checked_by = $1 WHERE tasks_status_id = $2",
        [ctx.from?.id, id]
      );
      const status_task = await db.query(
        "SELECT * FROM tasks_status WHERE id = $1",
        [id]
      );
      const levelTask = await db.query(
        "SELECT * FROM level_tasks WHERE id = $1",
        [status_task.rows[0].task_id]
      );
      await db.query("UPDATE tasks_status SET status = $1 WHERE id = $2", [
        "completed",
        id,
      ]);
      try {
        const friendshipTeam = await db.query(
          `SELECT * FROM friendships WHERE $1 in (users_ids)`,
          [id]
        );
        const friendshipTeam_ = await db.query(
          `SELECT * FROM friendships WHERE $1 in users_ids`,
          [id]
        );
        console.log(friendshipTeam, friendshipTeam_);
        for (const fr of friendshipTeam.rows[0].users_ids) {
          await db.query(
            "UPDATE users SET points = points + $1 WHERE id = $2",
            [
              levelTask.rows[0].task_type === "photo"
                ? 5
                : levelTask.rows[0].task_type === "friend"
                ? 3
                : 1,
              fr,
            ]
          );
          await bot.api.sendMessage(fr, `ü§ù –í–∞—à —Å–æ–∫–æ–º–∞–Ω–¥–Ω–∏–∫ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ!`);
        }
      } catch {}
      await db.query("UPDATE users SET points = points + $1 WHERE id = $2", [
        levelTask.rows[0].task_type === "photo"
          ? 5
          : levelTask.rows[0].task_type === "friend"
          ? 3
          : 1,
        status_task.rows[0].user_id,
      ]);
      await bot.api.sendMessage(
        status_task.rows[0].user_id,
        `–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ (${
          status_task.rows[0].level === 0
            ? "–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
            : `–£—Ä–æ–≤–µ–Ω—å ${
                status_task.rows[0].level === 5
                  ? '"–§–∏–Ω–∞–ª"'
                  : status_task.rows[0].level
              }`
        }, ${
          taskTypeText[levelTask.rows[0].task_type as keyof typeof taskTypeText]
        }) –ø—Ä–∏–Ω—è—Ç–æ, –æ–±–Ω–æ–≤–∏—Ç–µ –º–µ–Ω—é! üéâ`
      );
      return reviewTask(ctx as MyContext);
    case "reviewDecline":
      await db.query(
        "UPDATE tasks SET checked_by = $1 WHERE tasks_status_id = $2",
        [ctx.from?.id, id]
      );
      const _status_task = await db.query(
        "SELECT * FROM tasks_status WHERE id = $1",
        [id]
      );
      const _levelTask = await db.query(
        "SELECT * FROM level_tasks WHERE id = $1",
        [_status_task.rows[0].task_id]
      );
      await db.query("UPDATE tasks_status SET status = $1 WHERE id = $2", [
        "not completed",
        id,
      ]);
      await bot.api.sendMessage(
        _status_task.rows[0].user_id,
        `–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ (${
          _status_task.rows[0].level === 0
            ? "–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
            : `–£—Ä–æ–≤–µ–Ω—å ${
                _status_task.rows[0].level === 5
                  ? '"–§–∏–Ω–∞–ª"'
                  : _status_task.rows[0].level
              }`
        }, ${
          taskTypeText[
            _levelTask.rows[0].task_type as keyof typeof taskTypeText
          ]
        }) –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –∂–¥–µ–º –≤–∞—à—É –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É!`
      );
      return reviewTask(ctx as MyContext);

    case "reviewRegAccept":
      await db.query("UPDATE users SET role = $1 WHERE id = $2", [
        "student",
        id,
      ]);
      const getLevelTasks = async (
        level: number,
        taskType: "basic" | "photo" | "friend",
        limit: number
      ) => {
        return (
          await db.query(
            `SELECT * FROM level_tasks WHERE level = $1 AND task_type = $2 ORDER BY RANDOM() LIMIT $3;`,
            [level, taskType, limit]
          )
        ).rows.map((el) => [el.id, id, "not completed", level, null]);
      };
      const levels0 = await getLevelTasks(0, "basic", 1);
      const levels1basic = await getLevelTasks(1, "basic", 4);
      const levels1photo = await getLevelTasks(1, "photo", 1);
      const levels2basic = await getLevelTasks(2, "basic", 4);
      const levels2photo = await getLevelTasks(2, "photo", 2);
      const levels2friend = await getLevelTasks(2, "friend", 1);
      const levels3basic = await getLevelTasks(3, "basic", 6);
      const levels3photo = await getLevelTasks(3, "photo", 3);
      const levels3friend = await getLevelTasks(3, "friend", 1);
      const levels4basic = await getLevelTasks(4, "basic", 3);
      const levels5photo = await getLevelTasks(5, "photo", 5);
      const values = [
        ...levels0,
        ...levels1basic,
        ...levels1photo,
        ...levels2basic,
        ...levels2photo,
        ...levels2friend,
        ...levels3basic,
        ...levels3photo,
        ...levels3friend,
        ...levels4basic,
        ...levels5photo,
      ];
      const tasks_ = await db.query(
        "SELECT * FROM tasks_status WHERE user_id = $1",
        [ctx.from?.id]
      );
      for (const item of tasks_.rows) {
        await db.query("DELETE FROM tasks WHERE tasks_status_id = $1", [
          item.id,
        ]);
      }
      await db.query("DELETE FROM tasks_status WHERE user_id = $1", [
        ctx.from?.id,
      ]);
      await db.query(
        format(
          "INSERT INTO tasks_status (task_id, user_id, status, level, friendship_id) VALUES %L",
          values
        )
      );
      await bot.api.sendMessage(id, "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–Ω—è—Ç! ‚úÖ");
      setTimeout(
        async () =>
          await bot.api.sendMessage(
            id,
            `üëã *–ü—Ä–∏–≤–µ—Ç!*
  
–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —á–∏—Å–ª–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–ª–µ—à–º–æ–±–∞ ‚Äú_–Ø —É–∑–Ω–∞—é –°–∏—Ä–∏—É—Å_‚Äù. üåü
  
–£–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞–∂—É—Ç—Å—è ‚òÖ _–ø—Ä–æ—Å—Ç—ã–º–∏_. –ò —Ç–µ–±–µ –Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç —Ç—Ä—É–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏—Ö *–æ–¥–Ω–∏–º –∏–∑ –ø–µ—Ä–≤—ã—Ö*! üèÜ`,
            { parse_mode: "Markdown" }
          ),
        1000
      );
      setTimeout(
        async () =>
          await bot.api.sendMessage(
            id,
            `üí° *–†–∞—Å—Å–∫–∞–∂–µ–º –æ –ø—Ä–∞–≤–∏–ª–∞—Ö*

üîπ _–° 21 –Ω–æ—è–±—Ä—è –ø–æ 8 –¥–µ–∫–∞–±—Ä—è_ —Ç—ã –±—É–¥–µ—à—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π —ç—Ç–∞–ø –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. 

üîÑ *–í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è* –≤–Ω—É—Ç—Ä–∏ —ç—Ç–∞–ø–∞ –º–æ–∂–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Å–µ–π –Ω–µ–¥–µ–ª–∏. –ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å —Ä–µ—à–∏—Ç—å –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—É—é –∑–∞–¥–∞—á—É, –µ—ë –º–æ–∂–Ω–æ *–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å*, –Ω–æ —ç—Ç–æ —Å–∫–∞–∂–µ—Ç—Å—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤.

üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–π, —Ä–µ—à–∞—é—â–∏–π —ç—Ç–∞–ø* –æ—Ç–∫—Ä–æ–µ—Ç—Å—è 8 –¥–µ–∫–∞–±—Ä—è, –∏ –æ–Ω —Å—Ç–∞–Ω–µ—Ç –æ—á–Ω—ã–º. _–ù–µ –ø–ª–∞–Ω–∏—Ä—É–π –Ω–∏—á–µ–≥–æ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å._

üìÑ 9 –¥–µ–∫–∞–±—Ä—è –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –Ω–∞–∑–≤–∞–Ω—ã –∏–º–µ–Ω–∞ *–ª–∏–¥–µ—Ä–æ–≤*! üëë

‚ö†Ô∏è *–û–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö*: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ç–æ–º–æ–Ω—Ç–∞–∂–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ, –∑–∞ —ç—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω.

üôè –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!`,
            { parse_mode: "Markdown" }
          ),
        5000
      );

      setTimeout(
        async () =>
          await bot.api.sendMessage(
            id,
            `üïµÔ∏è‚Äç‚ôÇÔ∏è *–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç?*

üí° –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–∏–º–µ—Ä:
‚ùì –§–∏–≥—É—Ä—É –∫–∞–∫–æ–π —Å–∫–∞–∑–æ—á–Ω–æ–π –ø—Ç–∏—Ü—ã —è–≤–ª—è–µ—Ç —Å–æ–±–æ–π –∫–æ–º–ø–ª–µ–∫—Å —Å—Ç–µ–ª—ã –æ–ª–∏–º–ø–∏–π—Å–∫–æ–≥–æ –æ–≥–Ω—è –∏ —Å—Ç–∞–¥–∏–æ–Ω–∞ ‚Äú–§–∏—à—Ç‚Äù?

üëá –ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã?

üîÑ –≠—Ç–æ *–ª–µ–±–µ–¥—å*! ü™∂

_–°–æ–≥–ª–∞—Å–∏—Å—å, –Ω–µ —Ç–∞–∫ —É–∂ –∏ —Å–ª–æ–∂–Ω–æ!_`,
            { parse_mode: "Markdown" }
          ),
        12000
      );

      setTimeout(async () => {
        const user = (await db.query(SELECT_USER, [id])).rows[0];
        const isFriendship = await checkFriendship(user.id || 0);
        await bot.api.sendMessage(
          id,
          "üìÉ <b><u>–ú–µ–Ω—é</u></b>",
          user.role.includes("admin")
            ? { parse_mode: "HTML", reply_markup: IKAdminMenu }
            : {
                parse_mode: "HTML",
                reply_markup: isFriendship ? IKUserFriendshipMenu : IKUserMenu,
              }
        );
      }, 17000);
      return reviewTask(ctx as MyContext);

    case "reviewRegDecline":
      await db.query("UPDATE users SET role = $1 WHERE id = $2", [
        "student_not_checked",
        id,
      ]);
      await bot.api.sendMessage(
        id,
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ!",
        {
          reply_markup: new InlineKeyboard().text("–ù–∞—á–∞—Ç—å üöÄ", "greeting"),
        }
      );
      return reviewTask(ctx as MyContext);
    case "greeting":
      // @ts-ignore
      await ctx.conversation.enter("greeting");
      break;
    case "changeCommand":
      // @ts-ignore
      if (id === "back") return await ctx.conversation.enter("getFriendAnswer");
      // @ts-ignore
      await ctx.conversation.enter("changeCommand");
      break;
    case "writeMsg":
      try {
        await ctx.editMessageReplyMarkup();
      } catch {}
      await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.", {
        reply_markup: new InlineKeyboard()
          .text("–°—Ç—É–¥–µ–Ω—Ç—ã-–∏–≥—Ä–æ–∫–∏", "sendMessageFor_students")
          .row()
          .text("–ù–µ –∏–≥—Ä–æ–∫–∏ (–±–µ–∑ —Ä–µ–≥–∏)", "sendMessageFor_notStudents"),
      });
      break;
    case "sendMessageFor":
      if (id === "students")
        // @ts-ignore
        return await ctx.conversation.enter("msgForStudent");
      // @ts-ignore
      return await ctx.conversation.enter("msgForNotStudent");
      break;
    default:
      break;
  }
};
